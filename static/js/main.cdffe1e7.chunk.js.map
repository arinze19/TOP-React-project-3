{"version":3,"sources":["hooks/index.tsx","components/Loader/index.tsx","store/slices/pokemon-slice.ts","utils/index.tsx","hooks/usePokemons.tsx","components/Card/index.tsx","components/Header/index.tsx","components/Button/index.tsx","components/Modal/index.tsx","components/Instructions/index.tsx","App.tsx","store/index.ts","index.tsx"],"names":["useDispatch","useReduxDispatch","useSelector","useReduxSelector","LoaderContainer","styled","div","_templateObject","_taggedTemplateLiteral","Spinner","_templateObject2","Loader","_jsx","children","_jsxs","pokemonSlice","createSlice","name","initialState","score","level","modal","pokemons","reducers","setScore","state","action","payload","setLevel","setModal","setPokemons","resetStore","_pokemonSlice$actions","actions","selector","catalog","cache","Set","arr","i","id","Math","floor","random","length","has","push","add","randomizer","clone","_toConsumableArray","j","_ref","getPokemons","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","offset","_yield$axios$get","data","wrap","_context","prev","next","axios","get","concat","sent","results","map","item","idx","idxPad","url","slice","toString","padStart","isClicked","abrupt","stop","_x2","apply","arguments","usePokemons","dispatch","app","handlePokemonClick","findIndex","pokemon","_objectSpread","high_score","localStorage","getItem","JSON","parse","setItem","stringify","every","CardItem","handleClick","CardItemContainer","onClick","src","alt","CardContainer","CardList","_templateObject3","Card","_useQuery","useQuery","staleTime","Infinity","onSuccess","isLoading","isFetching","HeaderContainer","header","Logo","Header","useMemo","className","Container","button","Button","Overlay","open","ModalMain","_ref3","Modal","onClose","_Fragment","InstructionsContainer","Instructions","App","queryClient","useQueryClient","invalidateQueries","store","configureStore","reducer","client","QueryClient","ReactDOM","createRoot","document","getElementById","render","QueryClientProvider","React","StrictMode","Provider"],"mappings":"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","file":"static/js/main.cdffe1e7.chunk.js","sourcesContent":["import {\n  TypedUseSelectorHook,\n  useDispatch as useReduxDispatch,\n  useSelector as useReduxSelector,\n} from 'react-redux';\nimport { RootState, AppDispatch } from '../store';\n\nexport const useDispatch: () => AppDispatch = useReduxDispatch;\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector;\n","// Styles\nimport styled from 'styled-components';\n\nfunction Loader() {\n  return (\n    <LoaderContainer>\n      <Spinner>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </Spinner>\n    </LoaderContainer>\n  );\n}\n\n// Styles\nconst LoaderContainer = styled.div`\n  display: flex;\n  width: 50%;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 2rem auto;\n  max-width: 1220px;\n`;\n\nconst Spinner = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n\n  div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 64px;\n    height: 64px;\n    margin: 8px;\n    border: 8px solid #3a10e5;\n    border-radius: 50%;\n    animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: #3a10e5 transparent transparent transparent;\n\n    &:nth-child(1) {\n      animation-delay: -0.45s;\n    }\n\n    &:nth-child(2) {\n      animation-delay: -0.3s;\n    }\n\n    &:nth-child(3) {\n      animation-delay: -0.15s;\n    }\n\n    @keyframes lds-ring {\n      0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n  }\n`;\n\nexport default Loader;\n","import { createSlice } from '@reduxjs/toolkit';\n\n// types\nimport { Pokemon } from '../../types';\n\nconst initialState = {\n  score: 0,\n  level: 1,\n  modal: '',\n  pokemons: [] as Pokemon[],\n};\n\nconst pokemonSlice = createSlice({\n  name: 'pokemon-memo',\n  initialState,\n  reducers: {\n    setScore(state, action) {\n      state.score = action.payload;\n    },\n    setLevel(state, action) {\n      state.level = action.payload;\n    },\n    setModal(state, action) {\n      state.modal = action.payload;\n    },\n    setPokemons(state, action) {\n      state.pokemons = action.payload;\n    },\n    resetStore(state) {\n      state.level = 1;\n      state.modal = '';\n      state.pokemons = [];\n      state.score = 0;\n    },\n  },\n});\n\nexport const { setScore, setLevel, setModal, setPokemons, resetStore } =\n  pokemonSlice.actions;\nexport default pokemonSlice.reducer;\n","import axios from 'axios';\nimport { Pokemon, PokemonAPIResponse } from '../types';\n\nexport function selector(catalog: Pokemon[], level: number) {\n  // create a set to keep track of selected indexes\n  const cache = new Set();\n\n  // create return pokemon array\n  const arr = [];\n\n  for (let i = 0; i < level * 2; i++) {\n    // generate a random integer\n    let id = Math.floor(Math.random() * catalog.length);\n\n    // if the random integer is already in the set, generate another random integer\n    while (cache.has(id)) {\n      id = Math.floor(Math.random() * catalog.length);\n    }\n\n    // add the pokemon to the return array and the set\n    arr.push(catalog[id]);\n    cache.add(id);\n  }\n\n  return arr;\n}\n\nexport function randomizer(pokemons: Pokemon[]): Pokemon[] {\n  const clone = [...pokemons];\n\n  for (let i = clone.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [clone[i], clone[j]] = [clone[j], clone[i]];\n  }\n\n  return clone;\n}\n\nexport async function fetchPokemonsFromAPI(url: string) {\n  try {\n    const { data } = await axios.get<PokemonAPIResponse>(url);\n\n    return formatPokemons(data.results);\n  } catch (err) {\n    throw new Error('Something went wrong');\n  }\n}\n\nexport function formatPokemons(pokemons?: Pokemon[]) {\n  if (!pokemons) return [];\n\n  const clone = [...pokemons];\n\n  return clone.map((pokemon, id) => {\n    const idx = pokemon.url.slice(34, -1).toString().padStart(3, '0');\n\n    pokemon.id = id;\n    pokemon.url = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${idx}.png`;\n    pokemon.isClicked = false;\n    return pokemon;\n  });\n}\n\nexport const getPokemons = async (level: number) => {\n  const offset = Math.floor(Math.random() * 80); // pokeapi has 1154 pokemons, so enabling pagination offset of up to 1000?\n  const { data } = await axios.get(\n    `https://pokeapi.co/api/v2/pokemon?limit=${level + 10}&offset=${\n      offset * 10\n    }`\n  );\n\n  const pokemons: Pokemon[] = data.results.map((item: Pokemon, idx: number) => {\n    const idxPad = item.url.slice(34, -1).toString().padStart(3, '0'); // this is to account for the lack accurate index of each pokemon when fetching as a list. hence some manipulation to get the appropiate image\n    item.id = idx;\n    item.url = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${idxPad}.png`;\n    item.isClicked = false;\n\n    return item;\n  });\n\n  return selector(pokemons, level);\n};\n","import { useSelector, useDispatch } from '.';\n\nimport {\n  setLevel,\n  setModal,\n  setPokemons,\n  setScore,\n} from '../store/slices/pokemon-slice';\nimport { randomizer } from '../utils';\n\nconst usePokemons = () => {\n  const dispatch = useDispatch();\n\n  let score = useSelector((state) => state.app.score);\n  const pokemons = useSelector((state) => state.app.pokemons);\n  const level = useSelector((state) => state.app.level);\n\n  const handlePokemonClick = (id: number) => {\n    const state = {\n      pokemons: [...pokemons],\n      score: score,\n    };\n\n    // find index of clicked pokemon\n    const idx = pokemons.findIndex((pokemon) => pokemon.id === id);\n\n    if (state.pokemons[idx].isClicked) {\n      // dispatch game over modal\n      return dispatch(setModal('game_over'));\n    }\n\n    state.pokemons[idx] = { ...pokemons[idx], isClicked: true };\n\n    // get high score from local storage\n    const high_score = localStorage.getItem('high_score')\n      ? JSON.parse(localStorage.getItem('high_score')!)\n      : 0;\n\n    state.score += 1;\n\n    // if current score is higher than high score, increment high score\n    if (state.score > high_score) {\n      localStorage.setItem('high_score', JSON.stringify(state.score));\n    }\n\n    dispatch(setScore(state.score));\n\n    // check if all pokemons have been clicked\n    if (state.pokemons.every((pokemon) => pokemon.isClicked === true)) {\n      // upgrade level if all pokemons have been clicked\n      // dispatch level up actions\n      dispatch(setLevel(level + 1));\n    } else {\n      // shuffle pokemons and set pokemon state\n      const random = randomizer(state.pokemons);\n\n      // dispatch setPokemons actions\n      dispatch(setPokemons(random));\n\n      // dispatch score update\n    }\n  };\n\n  return {\n    handlePokemonClick,\n  };\n};\n\nexport default usePokemons;\n","import styled from 'styled-components';\nimport { useQuery } from 'react-query';\n\nimport Loader from '@components/Loader';\n\nimport { useDispatch, useSelector } from '../../hooks';\nimport usePokemons from '../../hooks/usePokemons';\nimport { setPokemons } from '../../store/slices/pokemon-slice';\n\nimport { getPokemons, randomizer } from '../../utils';\n\n// Types\nimport { Pokemon } from '../../types';\n\nexport interface CardItemProps {\n  pokemon: Pokemon;\n  handleClick: (id: number) => void;\n}\n\nconst Card = () => {\n  const dispatch = useDispatch();\n\n  const state = useSelector((state) => state.app);\n\n  const { handlePokemonClick } = usePokemons();\n\n  // fetch pokemons from API\n  const { isLoading, isFetching } = useQuery(\n    `https://pokeapi.co/api/v2/pokemon?limit=${state.level + 10}`,\n    () => getPokemons(state.level),\n    {\n      staleTime: Infinity,\n      onSuccess: (data) => {\n        const pokemons = randomizer(data);\n\n        dispatch(setPokemons(pokemons));\n      },\n    }\n  );\n\n  if (isLoading || isFetching) {\n    return <Loader />;\n  }\n\n  return (\n    <CardContainer>\n      <h2>Level: {state.level}</h2>\n      <CardList>\n        {state.pokemons.map((pokemon, idx) => (\n          <CardItem\n            pokemon={pokemon}\n            key={idx}\n            handleClick={handlePokemonClick}\n          />\n        ))}\n      </CardList>\n    </CardContainer>\n  );\n};\n\nconst CardItem = ({ pokemon, handleClick }: CardItemProps) => {\n  return (\n    <CardItemContainer onClick={() => handleClick(pokemon.id)}>\n      <img src={pokemon.url} alt={pokemon.name} />\n      <hr />\n      <span>{pokemon.name}</span>\n    </CardItemContainer>\n  );\n};\n\n// Styles\nconst CardContainer = styled.div`\n  h2 {\n    text-align: center;\n  }\n`;\n\nconst CardItemContainer = styled.div`\n  padding: 16px;\n  text-align: center;\n  display: flex;\n  border-radius: 8px;\n  flex-direction: column;\n  gap: 4px;\n  background-color: #ffd50074;\n  cursor: pointer;\n  margin: 1em;\n  transition: all 0.3s ease-in-out;\n\n  img {\n    width: 120px;\n    height: 120px;\n  }\n\n  hr {\n    border: none;\n    height: 1px;\n    background-color: #10162f;\n  }\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  @media (max-width: 768px) {\n    img {\n      width: 80px;\n      height: 80px;\n    }\n  }\n`;\n\nconst CardList = styled.div`\n  display: flex;\n  width: 50%;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 2rem auto;\n  max-width: 1220px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nexport default Card;\n","import { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { useSelector } from '../../hooks';\n\nfunction Header() {\n  const score = useSelector((state) => state.app.score);\n\n  const high_score = useMemo(() => {\n    const score = localStorage.getItem('high_score');\n    return score ? JSON.parse(score) : 0;\n  }, [score]);\n\n  return (\n    <HeaderContainer>\n      <Logo>\n        <img\n          src='https://res.cloudinary.com/dmrib2gtg/image/upload/v1697921863/logo_ktdpcf.png'\n          alt='poke-memo'\n        />\n        <h1>Poke Memo</h1>\n      </Logo>\n\n      <ul>\n        <li>\n          <span>Your Score: {score}</span>\n        </li>\n        <li>\n          <span>\n            High Score<i className='las la-star'></i>: {high_score}\n          </span>\n        </li>\n      </ul>\n    </HeaderContainer>\n  );\n}\n\n// Styles\nconst HeaderContainer = styled.header`\n  background-color: #10162f;\n  padding: 0.5rem;\n  color: white;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  .la-star {\n    color: #ffd500;\n  }\n\n  ul {\n    margin-right: 2rem;\n    padding: 0;\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n\n    ul {\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin: 0;\n      padding: 0 1rem;\n    }\n  }\n`;\n\nconst Logo = styled.div`\n  display: flex;\n  align-items: center;\n\n  img {\n    width: 120px;\n    height: 100px;\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    justify-content: center;\n\n    h1 {\n      display: none;\n    }\n  }\n`;\n\nexport default Header;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\n// Types\nexport interface ButtonProps {\n  children: React.ReactNode;\n  onClick: () => void;\n}\n\nconst Button = ({ children, onClick }: ButtonProps) => {\n  return <Container onClick={onClick}>{children}</Container>;\n};\n\n// Styles\nconst Container = styled.button`\n  border: none;\n  border-radius: 4px;\n  padding: 8px;\n  color: #fff;\n  width: 100%;\n  background-color: #5001d0;\n  font-weight: bold;\n`;\n\nexport default Button;\n","import styled from 'styled-components';\n\nimport Button from '@components/Button';\n\n// Types\nexport interface ModalProps {\n  open: boolean;\n  header: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst Modal = ({ children, header, onClose, open }: ModalProps) => {\n  return (\n    <>\n      <Overlay open={open} onClick={onClose} />\n      <ModalMain open={open}>\n        <div className='modal-header'>\n          <h2>{header}</h2>\n        </div>\n        <div className='modal-children'>{children}</div>\n        <div className='modal-footer'>\n          <Button onClick={onClose}>Close</Button>\n        </div>\n      </ModalMain>\n    </>\n  );\n};\n\n// Styled\nconst Overlay = styled.div<{ open: boolean }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: grid;\n  place-content: center;\n  width: 100%;\n  height: 100%;\n  transition: all 0.3s ease-in-out;\n\n  ${({ open }) => {\n    if (open) {\n      return `\n        background-color: rgba(0, 0, 0, 0.5);\n        pointer-events: all;\n        opacity: 1;\n      `;\n    } else {\n      return `\n        background-color: rgba(0, 0, 0, 0);\n        pointer-events: none;\n        opacity: 0;\n      `;\n    }\n  }}\n`;\n\nconst ModalMain = styled.div<{ open: boolean }>`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: absolute;\n  background-color: white;\n  left: 50%;\n  top: 25%;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 4px;\n  padding: 1rem;\n  text-align: center;\n  transition: all 0.5s ease-in-out;\n\n  ${({ open }) => {\n    if (open) {\n      return `\n        transform: translate(-50%, 0);\n      `;\n    } else {\n      return `\n        transform: translate(-50%, -100%);\n        opacity: 0;\n        pointer-events: none;\n      `;\n    }\n  }}\n`;\n\nexport default Modal;\n","import styled from 'styled-components';\n\nimport { useDispatch } from '../../hooks';\n\nimport { setModal } from '../../store/slices/pokemon-slice';\n\nconst Instructions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <InstructionsContainer>\n      <button onClick={() => dispatch(setModal('game_play'))}>\n        Instructions\n      </button>\n    </InstructionsContainer>\n  );\n};\n\nconst InstructionsContainer = styled.div`\n  position: fixed;\n  bottom: 1rem;\n  left: 1rem;\n\n  button {\n    border: 1px solid #ffd500;\n    border-radius: 4px;\n    font-size: 0.85rem;\n    font-weight: bold;\n    padding: 4px 8px;\n    background-color: #ffd50074;\n  }\n`;\n\nexport default Instructions;\n","import { useQueryClient } from 'react-query';\n\nimport { useSelector, useDispatch } from './hooks';\n\nimport Card from '@components/Card';\nimport Header from '@components/Header';\nimport Modal from '@components/Modal';\nimport Instructions from '@components/Instructions';\n\nimport { setModal, resetStore } from './store/slices/pokemon-slice';\n\nfunction App() {\n  const modal = useSelector((state) => state.app.modal);\n\n  const score = useSelector((state) => state.app.score);\n\n  const queryClient = useQueryClient();\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Header />\n\n      <Card />\n\n      <Instructions />\n\n      <Modal\n        header='Game Over'\n        open={modal === 'game_over'}\n        onClose={() => {\n          dispatch(resetStore());\n          queryClient.invalidateQueries();\n        }}\n      >\n        This game is over. Your score is {score}. Good game!\n      </Modal>\n\n      <Modal\n        header='Game Play'\n        open={modal === 'game_play'}\n        onClose={() => dispatch(setModal(''))}\n      >\n        This game tests your memory. Click on a pokemon to earn points. If you\n        click on the same pokemon twice, the game is over. If you click on all\n        pokemons exactly once, you level up. Good luck!\n      </Modal>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport pokemonSlice from './slices/pokemon-slice';\n\nconst store = configureStore({\n  reducer: {\n    app: pokemonSlice,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nimport './index.css';\n\nconst client = new QueryClient();\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\nroot.render(\n  <QueryClientProvider client={client}>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </QueryClientProvider>\n);\n"],"sourceRoot":""}