{"version":3,"sources":["helper-functions/app/index.tsx","components/layout/TheHeader.tsx","components/cards/CardItem.tsx","components/cards/CardList.tsx","components/layout/TheMenu.tsx","App.tsx","index.tsx"],"names":["randomPicker","level","pokemonCatalog","counter","boundary","newArray","idCache","randomInt","Math","floor","random","length","indexOf","randomItem","push","getPokemons","a","offset","axios","get","data","pokemons","results","map","item","idx","idxPad","url","slice","toString","padStart","id","isClicked","String","header","score","className","src","alt","currentScore","highScore","cardItem","pokemon","handleClick","onClick","name","cardList","pokemonsList","CardItem","style","textAlign","TheMenu","React","useState","infoVisible","setInfoVisible","display","initialScore","JSON","parse","localStorage","getItem","App","setScore","setLevel","setPokemons","useEffect","error","alert","TheHeader","CardList","newPokemons","clickedPokemonIdx","findIndex","prevScore","stringify","setItem","every","prevLevel","shuffledPokemons","r","forEach","val","randomArranger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAGO,SAASA,EACdC,EACAC,GAEA,IAAIC,EAAkB,EAChBC,EAA2B,EAARH,EACnBI,EAAsB,GACtBC,EAAoB,GAE1B,EAAG,CACD,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWR,EAAeS,OAAS,GAErE,IAAoC,IAAhCL,EAAQM,QAAQL,GAAmB,CACrC,IAAMM,EAAaX,EAAeK,GAClCF,EAASS,KAAKD,GACdV,WAEKA,EAAUC,GAEnB,OAAOC,EAgBF,IAAMU,EAAW,uCAAG,WACzBd,GADyB,qBAAAe,EAAA,sEAIjBC,EAAST,KAAKC,MAAsB,IAAhBD,KAAKE,UAJR,SAKAQ,IAAMC,IAAN,kDACsBlB,EAAQ,GAD9B,mBAEV,GAATgB,IAPmB,uBAKfG,EALe,EAKfA,KAMFC,EAAsBD,EAAKE,QAAQC,KACvC,SAACC,EAAeC,GACd,IAAMC,EAASF,EAAKG,IAAIC,MAAM,IAAK,GAAGC,WAAWC,SAAS,EAAG,KAK7D,OAJAN,EAAKO,GAAKN,EACVD,EAAKG,IAAL,kEAAsED,EAAtE,QACAF,EAAKQ,WAAY,EAEVR,KAlBY,kBAsBhB,CAACxB,EAAaC,EAAOoB,GAAW,OAtBhB,2DAwBhB,CAAC,GAAIY,OAAO,EAAD,MAxBK,0DAAH,sD,eCjBTC,MAlBf,YAAyC,IAAvBC,EAAsB,EAAtBA,MAChB,OACE,yBAAQC,UAAU,mBAAlB,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKC,IAAI,YAAYC,IAAI,cACzB,8CAGF,qBAAIF,UAAU,+BAAd,UACE,qBAAI,cAAY,gBAAhB,yBAA6CD,EAAMI,gBACnD,qBAAI,cAAY,aAAhB,uBACY,mBAAGH,UAAU,gBADzB,KAC8CD,EAAMK,oB,MCK7CC,MAhBf,YAA4D,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,YAC3B,OACE,sBACEP,UAAU,OACVQ,QAAS,kBAAMD,EAAYD,EAAQX,KACnC,cAAY,YAHd,UAKE,qBAAKM,IAAKK,EAAQf,IAAKW,IAAKI,EAAQG,OACpC,uBACA,qBAAKT,UAAU,4BAA4B,cAAY,iBAAvD,SACGM,EAAQG,W,MCIFC,MAbf,YAAoE,IAAhDzB,EAA+C,EAA/CA,SAAUpB,EAAqC,EAArCA,MAAO0C,EAA8B,EAA9BA,YAC7BI,EAAe1B,EAASE,KAAI,SAACmB,EAASjB,GAAV,OAChC,cAACuB,EAAD,CAAUN,QAASA,EAAmBC,YAAaA,GAAlBlB,MAGnC,OACE,qCACE,qBAAIwB,MAAO,CAAEC,UAAW,UAAxB,mBAA2CjD,KAC3C,qBAAKmC,UAAU,sBAAf,SAAsCW,Q,MC4B7BI,MArCf,WACE,MAAsCC,IAAMC,UAAS,GAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAKA,OACE,mCACE,sBACEnB,UAAU,sBACVa,MAAOK,EANS,CAAEE,QAAS,SADX,CAAEA,QAAS,QAQ3B,cAAY,WAHd,UAKE,qBAAKpB,UAAU,8BAAf,SACE,6CAEF,sBAAKA,UAAU,4BAAf,UACE,4VAOA,wBACEA,UAAU,8BACVQ,QAAS,kBAAMW,GAAe,IAC9B,cAAY,kBAHd,2BCnBJE,EAAsB,CAC1BlB,aAAc,EACdC,WAAYkB,KAAKC,MAAMC,aAAaC,QAAQ,eAAkB,GA8EjDC,MA1Ef,WACE,MAA0BV,IAAMC,SAAgBI,GAAhD,mBAAOtB,EAAP,KAAc4B,EAAd,KACA,EAA0BX,IAAMC,SAJL,GAI3B,mBAAOpD,EAAP,KAAc+D,EAAd,KACA,EAAgCZ,IAAMC,SAAoB,IAA1D,mBAAOhC,EAAP,KAAiB4C,EAAjB,KA8DA,OAXAb,IAAMc,WAAU,WACd,sBAAC,kCAAAlD,EAAA,sEACiCD,EAAYd,GAD7C,mCACQoB,EADR,MACkB8C,EADlB,MAGGC,MAAMD,GAENF,EAAY5C,GALf,0CAAD,KAQC,CAACpB,IAGF,sBAAKmC,UAAU,MAAf,UACE,cAACiC,EAAD,CAAWlC,MAAOA,IAClB,cAACmC,EAAD,CAAUjD,SAAUA,EAAUsB,YA9Dd,SAACZ,GACnB,IAAMwC,EAAsB,YAAOlD,GAC7BmD,EAAoBnD,EAASoD,WACjC,SAAC/B,GAAD,OAAsBA,EAAQX,KAAOA,KAIvC,GAAIwC,EAAYC,GAAmBxC,UAQjC,OAPAoC,MAAM,8BACNL,GAAS,SAACW,GACR,OAAO,2BACFA,GADL,IAEEnC,aAAc,OAGXyB,EAAS,GAGlBD,GAAS,SAACW,GACR,GAAIA,EAAUnC,cAAgBmC,EAAUlC,UAAW,CAEjD,IAAMA,EAAYkC,EAAUnC,aAAe,EAE3C,OADAmB,KAAKiB,UAAUf,aAAagB,QAAQ,YAAapC,EAAUX,aACpD,CACLU,aAAcmC,EAAUnC,aAAe,EACvCC,UAAWkC,EAAUnC,aAAe,GAGtC,OAAO,2BACFmC,GADL,IAEEnC,aAAcmC,EAAUnC,aAAe,OAI7CgC,EAAYC,GAAmBxC,WAAY,EAEnBuC,EAAYM,OAClC,SAACnC,GAAD,OAAmC,IAAtBA,EAAQV,aAIrBgC,GAAS,SAACc,GAAD,OAAeA,EAAY,KAGpCb,ELvCC,SAAwB5C,GAK7B,IAJA,IAAMhB,EAAW,GACX0E,EAA8B,GAC9B3E,EAAmBiB,EAASV,OAE3BN,EAASM,OAASP,GAAU,CACjC,IAAM4E,EAAIxE,KAAKC,MAAMD,KAAKE,SAAWN,IACR,IAAzBC,EAASO,QAAQoE,IAAW3E,EAASS,KAAKkE,GAGhD,OADA3E,EAAS4E,SAAQ,SAACC,GAAD,OAASH,EAAiBjE,KAAKO,EAAS6D,OAClDH,EK6BSI,CAAeZ,KAkB6BtE,MAAOA,IAC/D,cAAC,EAAD,Q,MC7ENmF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3cb8f892.chunk.js","sourcesContent":["import axios from 'axios';\nimport { pokemon } from '../../types';\n\nexport function randomPicker(\n  level: number,\n  pokemonCatalog: pokemon[]\n): pokemon[] {\n  let counter: number = 0;\n  const boundary: number = level * 2;\n  const newArray: pokemon[] = [];\n  const idCache: number[] = [];\n\n  do {\n    const randomInt = Math.floor(Math.random() * pokemonCatalog.length + 1);\n\n    if (idCache.indexOf(randomInt) === -1) {\n      const randomItem = pokemonCatalog[randomInt];\n      newArray.push(randomItem);\n      counter++;\n    }\n  } while (counter < boundary);\n\n  return newArray;\n}\n\nexport function randomArranger(pokemons: pokemon[]): pokemon[] {\n  const newArray = [];\n  const shuffledPokemons: pokemon[] = [];\n  const boundary: number = pokemons.length;\n\n  while (newArray.length < boundary) {\n    const r = Math.floor(Math.random() * boundary);\n    if (newArray.indexOf(r) === -1) newArray.push(r);\n  }\n  newArray.forEach((val) => shuffledPokemons.push(pokemons[val]));\n  return shuffledPokemons;\n}\n\nexport const getPokemons = async (\n  level: number\n): Promise<[pokemon[], unknown]> => {\n  try {\n    const offset = Math.floor(Math.random() * 100); // pokeapi has 1154 pokemons, so enabling pagination offset of up to 1000?\n    const { data } = await axios.get(\n      `https://pokeapi.co/api/v2/pokemon?limit=${level + 10}&offset=${\n        offset * 10\n      }`\n    );\n\n    const pokemons: pokemon[] = data.results.map(\n      (item: pokemon, idx: number) => {\n        const idxPad = item.url.slice(34, -1).toString().padStart(3, '0'); // this is to account for the lack accurate index of each pokemon when fetching as a list. hence some manipulation to get the appropiate image\n        item.id = idx;\n        item.url = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${idxPad}.png`;\n        item.isClicked = false;\n\n        return item;\n      }\n    );\n\n    return [randomPicker(level, pokemons), null];\n  } catch (error) {\n    return [[], String(error)];\n  }\n};\n","import '@styles/layout/the-header.css';\nimport { HeaderProps } from '../../types';\n\nfunction header({ score }: HeaderProps) {\n  return (\n    <header className='header-container'>\n      <div className='header-container__logo'>\n        <img src='/logo.png' alt='poke-memo' />\n        <h1>Poke Memo</h1>\n      </div>\n\n      <ul className='header-container__score-info'>\n        <li data-testid='current-score'>Your Score: {score.currentScore}</li>\n        <li data-testid='high-score'>\n          High Score<i className='las la-star'></i>: {score.highScore}\n        </li>\n      </ul>\n    </header>\n  );\n}\n\nexport default header;\n","import '@styles/cards/card-item.css';\nimport { CardItemProps } from '../../types';\n\nfunction cardItem({ pokemon, handleClick }: CardItemProps) {\n  return (\n    <div\n      className='card'\n      onClick={() => handleClick(pokemon.id)}\n      data-testid='card-item'\n    >\n      <img src={pokemon.url} alt={pokemon.name} />\n      <hr />\n      <div className='card-item-container__info' data-testid='card-item-name'>\n        {pokemon.name}\n      </div>\n    </div>\n  );\n}\n\nexport default cardItem;\n","import CardItem from './CardItem';\nimport '@styles/cards/card-list.css';\nimport { CardListProps } from '../../types';\n\nfunction cardList({ pokemons, level, handleClick }: CardListProps) {\n  const pokemonsList = pokemons.map((pokemon, idx) => (\n    <CardItem pokemon={pokemon} key={idx} handleClick={handleClick} />\n  ));\n\n  return (\n    <>\n      <h2 style={{ textAlign: 'center' }}>Level {level}</h2>\n      <div className='card-list-container'>{pokemonsList}</div>\n    </>\n  );\n}\n\nexport default cardList;\n","import React from 'react';\nimport '@styles/layout/the-menu.css';\n\nfunction TheMenu() {\n  const [infoVisible, setInfoVisible] = React.useState(true);\n\n  const hideInfoStyle = { display: 'none' };\n  const showInfoStyle = { display: 'block' };\n\n  return (\n    <>\n      <div\n        className='menu-info-container'\n        style={infoVisible ? showInfoStyle : hideInfoStyle}\n        data-testid='the-menu'\n      >\n        <div className='menu-info-container__header'>\n          <h3>Objective</h3>\n        </div>\n        <div className='menu-info-container__body'>\n          <p>\n            This application puts your memory to the test. You are presented\n            with multiple images of pokemons. The images get shuffled every-time\n            they are clicked. You CAN NOT click on any image more than once or\n            else your score resets to zero. The main objective is to get the\n            highest score as possible.. Goodluck üçÄ\n          </p>\n          <button\n            className='menu-info-container__button'\n            onClick={() => setInfoVisible(false)}\n            data-testid='the-menu-button'\n          >\n            Okay\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TheMenu;\n","import React from 'react';\nimport { randomArranger, getPokemons } from '@helpers/app';\nimport TheHeader from '@components/layout/TheHeader';\nimport CardList from '@components/cards/CardList';\nimport TheMenu from '@components/layout/TheMenu';\nimport { pokemon, score } from './types';\n\n//  ============ initial state values\nconst initialScore: score = {\n  currentScore: 0,\n  highScore: +JSON.parse(localStorage.getItem('highScore')!) || 0,\n};\nconst initialLevel: number = 1;\n\nfunction App() {\n  const [score, setScore] = React.useState<score>(initialScore);\n  const [level, setLevel] = React.useState<number>(initialLevel);\n  const [pokemons, setPokemons] = React.useState<pokemon[]>([]);\n\n  // ======================== handler functions\n  const handleClick = (id: number) => {\n    const newPokemons: pokemon[] = [...pokemons];\n    const clickedPokemonIdx = pokemons.findIndex(\n      (pokemon: pokemon) => pokemon.id === id\n    );\n\n    // end game if selected pokemon has been clicked\n    if (newPokemons[clickedPokemonIdx].isClicked) {\n      alert('Game Over Champ. Good game');\n      setScore((prevScore) => {\n        return {\n          ...prevScore,\n          currentScore: 0,\n        };\n      });\n      return setLevel(1);\n    }\n\n    setScore((prevScore) => {\n      if (prevScore.currentScore >= prevScore.highScore) {\n        // set new high score in local storage\n        const highScore = prevScore.currentScore + 1;\n        JSON.stringify(localStorage.setItem('highScore', highScore.toString()));\n        return {\n          currentScore: prevScore.currentScore + 1,\n          highScore: prevScore.currentScore + 1,\n        };\n      } else {\n        return {\n          ...prevScore,\n          currentScore: prevScore.currentScore + 1,\n        };\n      }\n    });\n    newPokemons[clickedPokemonIdx].isClicked = true;\n\n    const allPokesClicked = newPokemons.every(\n      (pokemon) => pokemon.isClicked === true\n    );\n    if (allPokesClicked) {\n      // upgrade level if all pokemons have been clicked\n      setLevel((prevLevel) => prevLevel + 1);\n    } else {\n      // shuffle pokemons and set pokemon state\n      setPokemons(randomArranger(newPokemons));\n    }\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      const [pokemons, error] = await getPokemons(level);\n      if (error) {\n        alert(error);\n      } else {\n        setPokemons(pokemons);\n      }\n    })();\n  }, [level]);\n\n  return (\n    <div className='App'>\n      <TheHeader score={score} />\n      <CardList pokemons={pokemons} handleClick={handleClick} level={level} />\n      <TheMenu />\n    </div>\n  );\n}\n\nexport default App;\n","import React    from 'react';\nimport ReactDOM from 'react-dom';\nimport App      from './App';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}