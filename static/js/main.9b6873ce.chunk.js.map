{"version":3,"sources":["components/Card/index.tsx","components/Header/index.tsx","components/Loader/index.tsx","utils/index.tsx","App.tsx","index.tsx"],"names":["CardItem","pokemon","handleClick","className","onClick","id","src","url","alt","name","Card","pokemons","level","map","idx","Header","score","highScore","useMemo","localStorage","getItem","parseInt","Loader","selector","catalog","cache","Set","arr","i","Math","floor","random","length","has","push","add","getPokemons","a","offset","axios","get","data","results","item","idxPad","slice","toString","padStart","isClicked","App","useState","state","setState","setPokemons","isLoading","setIsLoading","useEffect","console","log","findIndex","alert","JSON","parse","setItem","stringify","every","randomizer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b6873ce.chunk.js","sourcesContent":["// Styles\nimport './styles.css';\n\n// Types\nimport { Pokemon } from '../../types';\n\nexport interface CardProps {\n  pokemons: Pokemon[];\n  level: number;\n  handleClick: (id: number) => void;\n}\n\nexport interface CardItemProps {\n  pokemon: Pokemon;\n  handleClick: (id: number) => void;\n}\n\nconst Card = ({ pokemons, level, handleClick }: CardProps) => {\n  return (\n    <div className='card-list__container'>\n      <h2>Level: {level}</h2>\n      <div className='card-list__main'>\n        {pokemons.map((pokemon, idx) => (\n          <CardItem pokemon={pokemon} key={idx} handleClick={handleClick} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst CardItem = ({ pokemon, handleClick }: CardItemProps) => {\n  return (\n    <div\n      className='card'\n      onClick={() => handleClick(pokemon.id)}\n      data-testid='card-item'\n    >\n      <img src={pokemon.url} alt={pokemon.name} />\n      <hr />\n      <span className='card-item__name' data-testid='card-item-name'>\n        {pokemon.name}\n      </span>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useMemo } from 'react';\n\n// Styles\nimport './styles.css';\n\nexport interface HeaderProps {\n  score: number;\n}\n\nfunction Header({ score }: HeaderProps) {\n  const highScore = useMemo(() => {\n    const score = localStorage.getItem('high_score');\n    return score ? parseInt(score) : 0;\n  }, [score]);\n\n  return (\n    <header className='header-container'>\n      <div className='header-container__logo'>\n        <img src='/logo.png' alt='poke-memo' />\n        <h1>Poke Memo</h1>\n      </div>\n\n      <ul className='header-container__score-info'>\n        <li data-testid='current-score'>Your Score: {score}</li>\n        <li data-testid='high-score'>\n          High Score<i className='las la-star'></i>: {highScore}\n        </li>\n      </ul>\n    </header>\n  );\n}\n\nexport default Header;\n","// Styles\nimport './styles.css';\n\nfunction Loader() {\n  return (\n    <div className='loader-container'>\n      <div className='lds-ring'>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import axios from 'axios';\nimport { Pokemon, PokemonAPIResponse } from '../types';\n\nexport function selector(catalog: Pokemon[], level: number) {\n  // create a set to keep track of selected indexes\n  const cache = new Set();\n\n  // create return pokemon array\n  const arr = [];\n\n  for (let i = 0; i < level * 2; i++) {\n    // generate a random integer\n    let id = Math.floor(Math.random() * catalog.length);\n\n    // if the random integer is already in the set, generate another random integer\n    while (cache.has(id)) {\n      id = Math.floor(Math.random() * catalog.length);\n    }\n\n    // add the pokemon to the return array and the set\n    arr.push(catalog[id]);\n    cache.add(id);\n  }\n\n  return arr;\n}\n\nexport function randomizer(pokemons: Pokemon[]): Pokemon[] {\n  // create a return array\n  const arr = [];\n\n  // create a set to keep track of selected indexes\n  const cache = new Set();\n\n  for (let i = 0; i < pokemons.length; i++) {\n    let id = Math.floor(Math.random() * pokemons.length);\n\n    // if the random integer is already in the set, generate another random integer\n    while (pokemons[id].id === pokemons[i].id || cache.has(id)) {\n      id = Math.floor(Math.random() * pokemons.length);\n    }\n\n    // add the pokemon to the return array and the set\n    arr[id] = pokemons[i];\n    cache.add(id);\n  }\n\n  return arr;\n}\n\nexport async function fetchPokemonsFromAPI(url: string) {\n  try {\n    const { data } = await axios.get<PokemonAPIResponse>(url);\n\n    return formatPokemons(data.results);\n  } catch (err) {\n    throw new Error('Something went wrong');\n  }\n}\n\nexport function formatPokemons(pokemons?: Pokemon[]) {\n  if (!pokemons) return [];\n\n  const clone = [...pokemons];\n\n  return clone.map((pokemon, id) => {\n    const idx = pokemon.url.slice(34, -1).toString().padStart(3, '0');\n\n    pokemon.id = id;\n    pokemon.url = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${idx}.png`;\n    pokemon.isClicked = false;\n    return pokemon;\n  });\n}\n\nexport const getPokemons = async (level: number) => {\n  const offset = Math.floor(Math.random() * 80); // pokeapi has 1154 pokemons, so enabling pagination offset of up to 1000?\n  const { data } = await axios.get(\n    `https://pokeapi.co/api/v2/pokemon?limit=${level + 10}&offset=${\n      offset * 10\n    }`\n  );\n\n  const pokemons: Pokemon[] = data.results.map((item: Pokemon, idx: number) => {\n    const idxPad = item.url.slice(34, -1).toString().padStart(3, '0'); // this is to account for the lack accurate index of each pokemon when fetching as a list. hence some manipulation to get the appropiate image\n    item.id = idx;\n    item.url = `https://assets.pokemon.com/assets/cms2/img/pokedex/full/${idxPad}.png`;\n    item.isClicked = false;\n\n    return item;\n  });\n\n  return selector(pokemons, level);\n};\n","import { useState, useEffect } from 'react';\nimport Card from '@components/Card';\nimport Header from '@components/Header';\nimport Loader from '@components/Loader';\nimport { randomizer, getPokemons } from './utils';\nimport { Pokemon } from './types';\n\nfunction App() {\n  const [state, setState] = useState({ score: 0, level: 1 });\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = (id: number) => {\n    // find index of clicked pokemon\n    const idx = pokemons.findIndex((pokemon: Pokemon) => pokemon.id === id);\n\n    // end game if selected pokemon has been clicked\n    if (pokemons[idx].isClicked) {\n      alert('Game Over Champ. Good game');\n      return setState({ score: 0, level: 1 });\n    }\n\n    pokemons[idx].isClicked = true;\n    state.score = state.score + 1;\n\n    // get high score from local storage\n    const highScore = localStorage.getItem('high_score')\n      ? JSON.parse(localStorage.getItem('high_score')!)\n      : 0;\n\n    // if current score is higher than high score, increment high score\n    if (state.score >= highScore) {\n      localStorage.setItem('high_score', JSON.stringify(state.score));\n    } else {\n      // else increment current score\n      setState({\n        ...state,\n        score: state.score + 1,\n      });\n    }\n\n    // check if all pokemons have been clicked\n    if (pokemons.every((pokemon) => pokemon.isClicked === true)) {\n      // upgrade level if all pokemons have been clicked\n      setState({\n        ...state,\n        level: state.level + 1,\n      });\n    } else {\n      // shuffle pokemons and set pokemon state\n      setPokemons(randomizer(pokemons));\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      try {\n        const pokemons = await getPokemons(state.level);\n        setPokemons(pokemons);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [state.level]);\n\n  return (\n    <>\n      <Header score={state.score} />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <Card\n          pokemons={pokemons}\n          level={state.level}\n          handleClick={handleClick}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}